day66 (웹개발4 13일차 / vue 2일차)
자바스크립트 복습 

-------------------------------------------------------------------------------------------------
[자바스크립트 총 복습]
🧡기본 내용
	1) 자바스크립트 사용
	   <script>자바스크립트<script>
	      script 태그 안에 javascript 코드 사용
	   <script src="파일경로"></script>
	   <script src="파일경로" /> 
	      script 태그 안에 src 속성에 자바스크립트 파일 경로 삽입

	2) 콘솔에 출력
	   console.log()

	3) 알림/경고창
	   alert()       단순한 정보를 사용자에게 표시하기 위해 사용된다
	   prompt()   사용자에게 입력받을 수 있는 칸을 제공하는 대화상자
	   confirm()   사용자에게 예 or 아니오 선택지를 제공하는 대화상자

	4) 주석
	   //        한줄주석
	   /* */    여러줄 주석

	5) 숫자표현, 문자표현, 세미콜론
	   숫자 : 1234
	   문자 : 'hello' "hello" `hello`
	   세미콜론(;) : 명령문의 끝

	6) 변수
	   다양한 값을 저장할 수 있는 저장공간
	   키워드 변수명 = 값;
	   값이 변수에 저장될 때 타입이 정해진다 (동적 바인딩)
	   var a = 값;
	   let b = 값;

	   var 	ES6이전에 만들어진 키워드로 호이스팅이 가능
	   let 	호이스팅이 불가능

	7) 함수(메소드)
	   코드를 편하게 재사용하기 위해서 그룹화 한 것을 의미한다
	   객체 안에서 만들어진 함수를 메소드라고한다
	   함수의 종류 : 일반함수, 익명함수, 화살표함수, 콜백함수, 재귀함수 등..

	8) 객체
	   프로퍼티(프로퍼티 키와 프로퍼티 값)로 구성
	   변수와 함수를 같이 가질 수 있다.

	9) 이벤트
	   HTML 요소에서 발생한 사건을 의미한다


🧡배열
	   - 자바스크립트의 배열은 특수한 객체
	   - 배열안에 있는 데이터에는 순서가 존재한다(index)
	   - 다양한 메소드를 가지고 있다

	1) 배열의 생성
	   - 배열 리터럴 표기법(array literal syntax)
	   const 배열명 = ['사과', '복숭아',..];

	   - 배열 생성자 표기법(array constructor syntax)
	   const 배열명 = new Array('사과', '바나나', '체리', ...);


	2) 배열의 접근
	   - 대괄호[ ] 를 통해 배열 안의 값에 접근이 가능하다
	   - 인덱스는 0부터 시작한다

	   const fruits = ['사과', '복숭아',..];
	   console.log(fruits[0]);   //사과
	   console.log(fruits[1]);   //복숭아
	   console.log(fruits[2]);      


	3) 자주사용하는 배열 프로퍼티, 메소드
	   .length : 배열 길이
	   .push( ) : 배열 끝에 항목 추가
	   .forEach( ) : 배열의 항목 순회하면서 처리(반복문)
	   .pop( ) : 배열 끝에서 항목 제거
	   .shift( ) : 배열 앞에서 항목 제거
	   .unshift( ) : 배열 앞에 항목 추가
	   .indexOf( ) : 배열 안 항목의 인덱스(index)찾기
	   .splice( ) : 인덱스 위치에 있는 항목 제거


	4) 구조 분해 할당(Distructuring assignment)
	   배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트의 표현식
	   day65.js 파일 참고


	5) Spread Syntax(전개구문)
	   배열을 할당할 때 참조값을 할당하는 것이 아닌 배열 안의 항목을 펼치는 방식으로 할당할 수 있다
	   ...표기법을 사용한다
   
                let arr1 = [1, "이", "three", 4.0];
	    let arr2 = [...arr1, 5, '육'];
   
	   함수의 매개변수에서 사용하게 되면 가변 매개변수로 사용할 수 있다
	   function numbers(...num){
	      console.log(num);  --> 파라미터가 1개만 들어와도 배열 형태로 출력
	   }


	6) 배열 복사하기
	   배열은 객체이기 때문에 참조값을 가지고 있고
	   이 값을 다른 배열에 할당하면 결국 같은 참조값을 가진다.
	   --> 복사한 배열의 내용을 변경하면 기존 배열의 값이 같이 변경된다


🧡데이터 타입(값의 종류)
	   기본타입과 객체타입으로 구분된다

	1) 기본타입(Primitive Type)
	   자바스크립트에서 객체가 아닌것들을 의미하며 더이상 작은 단위로 나뉘어지지 않는 값이다
	   기본타입의 값을 그 자체로 변수에 저장된다.
	   객체, 배열, 함수와 달리 변형 할 수 없다.

	   숫자(number), 문자열(string), 논리형(boolean), null, undefiend, 심볼(symbol)


	2) 객체 타입(Object Type)
	   자바스크립트에서 기본타입을 제외한 모든 값은 객체타입이다

	   자바스크립트의 내장된 객체
	   Array, Date, Math, Object, 이외의 모든 것..

	   - 객체 특징
	           	   자바스크립트의 객체는 {이름(key) : 값(value)}의 형태로 프로퍼티(Property)를 저장하는 컨테이너이다
		   자바스크립트 기본타입은 하나의 값만 가질 수 있는데 객체 타입은 여러개의 프로퍼티들을 포함할 수 있다
		   객체의 프로퍼티는 값으로 기본타입, 또 다른 객체, 함수를 가질 수 있으며 
		   객체의 프로퍼티가 함수를 가질 때 메소드라고 부른다
		   참조타입(Reference Type)이다.

	3) typeof
	   피연산자의 데이터 타입을 문자열로 반환한다


	4) 숫자형
		- 정수, 실수 상관없이 모든 숫자를 number 타입으로 사용한다.
		- 특별한 숫자 값
			infinity	양수를 0으로 나눈 경우
			-infinity	음수를 0으로 나눈 경우
			NaN	숫자가 아닌 값을 나눈 경우

		const number = 2;		// 2는 숫자형 리터럴이라고 말하는 것이 정확한 표현이다.


	5) 문자열
		string type
		' '   " "   ` `   → 백틱을 사용한 경우 줄바꿈까지 반영되어서 출력된다.
			     → 따옴표를 사용한 경우 줄바꿈을 하기 위해서는 이스케이프 문자 \n을 사용한다.
	
		- 템플릿 문자열 ${ }
			ES6 이전에는 + 연산으로 문자열 연결
			ES6 이후 백틱을 이용하여 문자열과 값 연결할 수 있음.
		- 이스케이프 표현
			\n	줄바꿈
			\r	캐리지 리턴
			\t	탭
			\\	백슬래시
			\"	큰따옴표
			\'	작은따옴표


	6) boolean
		true / false
		조건식의 결과로 boolean 타입을 사용한다.


	7) symbol
		- ES6에서 도입한 새로운 자료형
		- 항상 유일한 값이다.
		- 다른 식별자와 혼동해서는 안되는 고유한 식별자가 필요한 경우 심볼을 사용한다.


	8) null  /  undefined
		- 둘 다 비어있는 상태이다.
		- null		값이 없음 (값이 비어있는 상태를 명시적으로 표현)
		- undefined	값을 할당하지 않은 상태


🧡제어문
	- 프로그램의 흐름을 제어할 수 있도록 도와주는 실행문을 의미
	- 제어문을 활용하게 되면 목적에 맞게 필요한 조작을 할 수 있다.

	1) 조건문 : 조건에 따라 다른 문장을 실행하는 문장
		if	관계 연산자를 이용하여 조건을 비교
			if (조건이 참일 때)  else if (다중조건)  else (조건이 거짓일 때)

		switch 	- 하나의 변수에 여러 개의 값이 들어갈 수 있다.
			- 표현식의 값이 case와 일치할 경우 case에 있는 명령문을 수행
			- 모든 case에 해당하지 않을 때는 default 문의 내용 실행

		★JS에서 거짓과 같은 값
			false
			0   -0   -n
			' '   " "   ` `
			null   undefined   NaN

	2) 반복문 : 동일한 문장을 여러 번 실행시키는 문장
		for	  - 반복 횟수와 범위를 알 때
			  - for(let 초기화; 조건식; 증감식)
			  - for...in	   객체의 key값 순회	(ES6)
			  - for...of    객체의 value값 순회	(ES6)

		while	  조건을 알 때
		do~while  최소 한 번은 무조건 실행하고 조건을 비교할 때

	3) 기타제어문 : 주로 반복문 안에서 멈추거나, 탈출, 건너뛰고 계속 진행하는 실행을 해야할 때 사용
		continue  해당 블록을 건너뛰고 다음 반복을 실행
		break	 반복문 즉시 탈출, switch문의 case마다 종료할 수 있는 조건



🧡연산자
	1) 문자열 병합 +

	2) 산술연산자 + - * / %

	3) 증감연산자
		num++	  후위증가 : 현재 명령 수행 후 1 증가
		++num	  전위증가 : 먼저 1 증가하고 현재 명령 수행
		num--	  후위감소
		--num	  전위감소

	4) 비교연산자
		비교 결과가 참인지, 거짓인지에 따라 논리값을 반환함
		> <= < <= == === != !==

	5) 논리연산자
		- boolean값만 다룰 수 있으며 true, false만 존재함.
		- 자바스크립트의 논리연산자는 boolean이 아닌 값도 다를 수 있고, boolean이 아닌 값도 반환한다.
		
		and(&&)   - 둘 다 true일 때만 true 리턴한다.
			  - 앞의 값이 true일 때만 뒤의 문장을 실행한다.
			    앞의 값이 false인 경우에는 뒤 문장을 실행하지 않는다.

		or(||)	  - 둘 중 하나라도 true라면 true를 리턴한다.
			  - 앞의 값이 참이면 앞의 값을 반환하고, 거짓이라면 뒤의 값을 반환함
			    console.log( true || "dog");	// true
			    console.log( "dog" || "cat");	// dog
			    console.log( false || "dog");	// dog
			    console.log( 0 || "dog");		// dog

			    console.log( null || 0 );		// 0
			    console.log( undefined || null );	// null

		not(!)	   피연산자를 반대로 바꾼다.


	6) 삼항연산자
		- 조건식 ? 값1 : 값2 ;
		- 조건식이 true면 값1 리턴, false면 값2 리턴


🧡함수
	1) 함수 생성
		- 함수 선언식	function 함수명(매개변수) { 실행문 }	    호이스팅 O
		- 함수 표현식	let 식별자 = function( ) { 실행문 }	    호이스팅 X
		- parameter	소괄호( ) 안에 파라미터를 선언하여 함수 호출 시 인자를 전달할 수 있다.
		- return 반환값	return 키워드를 사용하여 값을 반환할 수 있다.

	2) 함수 스코프 scope
		- 전역 스코프 : 최상단에 선언된 변수, 함수
		- 블록 스코프 : 블록 단위로 선언된 변수, 함수

	3) 익명함수
		- 이름이 없는 함수, 값으로 사용될 수 있다.

	4) 즉시 실행 함수
		- ( ) ( )를 사용하여 즉시 실행하는 함수를 만들 수 있다.
		(function( name ) {
			console.log("즉시실행함수");
			console.log(name);
		}) ("황진");

	5) 화살표 함수 ( ) => { }
		- ES6에서 추가됨
		- function 예약어 생락 가능
		- 매개변수가 한개라면 소괄호 생략 가능
		- 함수 body에 표현식이 한개라면 중괄호 생략 가능, return문이라면 return 키워드도 생략 가능

	6) 콜백함수
		- 다른 함수의 매개변수에 전달되는 함수


🧡DOM(Document Object Model)
	- 웹문서를 제어하기 위해 웹문서를 객체화한 것을 의미
	- 객체는 값을 나타내는 프로퍼티, 메서드를 가지고 있다.
	- HTML의 모든 요소는 DOM 트리로 구성된다.

1. HTMLCollection / NodeList
	https://developer.mozilla.org/ko/docs/Web/API/HTMLCollection
	https://developer.mozilla.org/ko/docs/Web/API/NodeList

2. DOM : 문서 객체 모델
	https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model






