day65 (웹개발4 12일차 / vue 1일차)
프론트엔드 프레임워크 -> Vue.js -> Vue 개발도구 확인 및 설치 -> js 총 복습

------------------------------------------------------------------------------------------------------------------------------

🧡프론트엔드 프레임워크 (JS관련 프레임워크)
		Angular				React				Vue.js
   등장		2010				2013				2014
   개발자		Google				Facebook				Google(Evan You)
   라이선스 	MIT				MIT				MIT
   주요사항	일반DOM			가상DOM			가상DOM
		HTML 마크업			JSX 권장				HTML 마크업
   난이도		상				중				하


🧡Vue.js
	- Evan You라는 개발자가 2013.12월에 웹 어플리케이션 UI를 빠르게 개발하기 위해 만든 JS 프레임워크
	- 웹 화면 작성에 최적화된 프레임워크
	- 사용자 인터페이스 개발을 위한 progressive 프레임워크
	- Vue.js는 SPA(Single Page Application) 개발을 위한 프레임워크이다.

	*** SPA와 일반 웹페이지의 차이
			일반웹						SPA
	     페이지갱신	사용자가 링크 클릭하면 새로운 페이지를 로드하여	페이지를 동적으로 로드하고, 갱신할 때
			전체 페이지를 새로고침함				Ajax or JS를 사용하여 내용만 업데이트 가능함

	     사용자경험	페이지 로드마다 새로운 HTML 필요로 함		- 페이지 갱신이 부드럽고 빠르며, 어플리케이션처럼 느낄 수 있음
			→ 덜 부드럽고 느린 화면으로 느껴짐			- 페이지 전환 시 화면깜빡임X, 재렌더링 되지 않음

	     라우팅	링크를 클릭할 때마다 서버로부터 새로운 페이지를	- 클라이언트 측 라우팅을 사용하여 URL을 기반으로
			요청하고 받아옴					  사용자가 보는 내용을 관리
									- URL의 일부를 변경하여 새로운 페이지처럼 보이는 컨텐츠 로드 가능

	     검색엔진	서버측에서 전체 페이지의 컨텐츠를 렌더링함		초기 로드시에 HTML이 동적을 콘텐츠 렌더링
			→검색 엔진이 컨텐츠를 쉽게 색인화 가능		→일반적으로 검색엔진은 초기에 컨텐츠를 색인화 하지 못할 수 있음

	     네트워크	페이지를 요청할 때마다 새로운 HTML 다운로드하여	초기 로드 시 모든 리소스를 한번에 다운로드
	        트래픽	전체적으로 봤을 때 더 많은 네트워크 트래픽		→초기 로딩 속도는 느릴 수 있지만 이후에는 필요한 데이터만
			발생할 수 있음.					   요청하고 업데이트 하기 때문에 네트워크 트래픽이 줄어든다.
				


🧡Vue.js의 장점
	- 직관적이고 배우기 쉽다.
	- 재사용을 통한 어플리케이션 개발기간 단축, 양질의 코드를 생산할 수 있다.
	- Angular -> React -> Vue.js 순서로 개발되었기 때문에
	  Angular의 장점(데이터바인딩)과 React의 장점(가상DOM)을 모두 가지고 있다.

	*** Angular의 데이터바인딩 (Two-way 데이터 바인딩)
		- 데이터와 웹 화면의 요소(HTML DOM)가 서로 양방향으로 연결되어 있어서
		  어느 한쪽에서 변경이 일어나면 연결되어 있는 다른 쪽에 자동으로 반영되는 것을 의미한다.

	*** React의 DOM
		- DOM의 문제 DOM 트리구조를 모두 갱신하는 비효율성으로 인해 치명적인 성능저하 극복
		  →Virtual DOM(가상돔) 개념을 제공한다.


🧡Vue.js의 특징
	1. MVVM 패턴 사용
		- Model-View-ViewModel을 의미한다.
		- 어플리케이션 로직과 UI의 분리를 위해 설계된 패턴이다.
		- ViewModel은 Model의 데이터 변경에 대한 알림을 받고, 바인딩 기법을 통해 미리 정해진 템플릿 규칙에 따라
		  View를 다시 그려낸다.

		View : HTML, CSS로 작성
	   	ViewModel : 실제 논리 및 데이터 흐름을 담당한다


	2. 컴포넌트 Component
		- 작은 단위부터 특정 기능을 처리하는 더 큰 단위까지 화면(View)을 이루고 있는
		  작은 단위의 View 중에 다른 화면에서도 사용되는 View가 있다.
		- 단위의 View를 재사용할 수 있는 구조로 개발하는 것을 의미한다.


🧡Vue 개발도구
	1. 프론트엔드 개발도구
		Visual Studio Code		MS에서 제공하는 무료 text editor
		Sublime Text		가볍고 빠른 성능
		Atom			GitHub에서 개발한 무료 text editor

	2. Vue 설치 전 확인할 것
		- Visual Studio Code 설치 여부
		- Node.js 최신 버전 설치
		- npm 버전 확인

	3. 패키지 관리 도구
		- npm		Node.js 공식 패키지 관리 도구, 대부분의 라이브러리와 프레임워크를 지원한다.
		- yarn		Facebook에서 개발한 패키지 관리 도구, npm보다 더 빠르고 안정적이다.


🧡Vue 설치
	- VS Code workspace 안에서
	  npm install --golbal @vue/cli
	  npm install --global yarn

	- 확장프로그램 설치
	  Vue - official 설치

	- 크롬 확장 프로그램 설치
	  Vue.js devtools 설치 후 고정


🧡ES6 (ECMAScript 6)
	- ECMAScript는 ECMA-262 기술 규격에 정의된 표준화된 스크립트 프로그래밍 언어를 의미한다.
	- ES6버전과 이전 버전의 변환기능을 제공하는 것을 트랜스파일러(Transpiler)
  	  babel, tsc(typescript 트랜스파일러) 대표적이다.

	1) 도구
   		- Babel REPL 브라우저 기반의 도구
		- ES6 코드를 작성하면 즉시 ES5 코드로 변환을 시도하며 에러메시지도 바로 보여준다

	2) npm 패키지와 package.json 파일
	 	- npm install, yarn add 명령어는 Node.js 패키지를 설치할 수 있는 명령어
	   	- npm install 패키지명1, 패키지명2
		      로컬모드로 설치, 현재 디렉터리의 node_modules 디렉터리에 패키지를 설치하는 것
	   	- npm install -g 패키지명
		      -g 옵션은 패키지를 전역(global)에 설치, 현재 내 컴퓨터 내의 모든 프로젝트에서 이용가능함
   		- npm install --save 패키지명1, 패키지명2
		      --save 옵션은 현재 프로젝트 package.json에 개발 의존성으로 기록
	   	- npm install --save-dev 패키지명1, 패키지명2
		      --save-dev 옵션은 현재 프로젝트 package.json에 개발 의존성으로 기록
     		      운영버전으로 빌드된 이후에는 사용되지 않는다

	3) 자주 사용하는 npm 명령어
		   npm init : 프로젝트 초기화
		   npm install : package.json 패키지 설치
		   npm install --save : 패키지를 프로젝트 의존성으로 추가
		   npm install --save-dev : 패키지를 프로젝트 개발 의존성으로 추가
		   npm install --global(-g) : 패키지를 전역수준으로 추가
		   npm update --save : 프로젝트 패키지 업데이트
		   npm run 스크립트 명 : package.json의 스크립트 명령 실행
		   npm uninstall --save : 패키지 삭제
		   npm cache clean : 캐시 삭제

	4) Babel 트랜스파일러 사용하기
		- 추가설정이 필요하다
		- 설정 파일 형식은 .babelrc 파일, babel.config.json파일


------------------------------------------------------------------------------------------------------------------------------

[ JS 총 복습 ]
🧡let과 const
	- ES6가 등장하기 전에는 변수 선언 시에 var 키워드를 사용했다.
	- 호이스팅
		실행 컨텍스트가 만들어진 후에 var 키워드가 부여된 변수를 미리 생성하는 것
		호이스팅 단계에서는 js 코드를 파싱하고 내부에 var 키워드가 지정된 코드를 미리 찾아서 미리 메모리에 할당하는 것이다.
	- 호이스팅의 특징
		1) 함수 단위로 호이스팅 한다.
		2) 호이스팅 단계에서 이미 변수가 생성되어 있다면 변수를 생성하지 않고 건너뛴다. 
		   (오류 발생 x, 변수의 중복 선언을 허용한다.)  --> var의 문제점 --> let이 나오게 됨

	- let
		블록 수준의 유효 범위를 지원한다.
		변수의 중복 선언을 하지 않고 호이스팅도 하지 않는다.
		let 키워드 변수가 중복되면 오류가 발생함

	- const
		선언될 때 값이 할당되면 변경할 수 없는 상수를 만들 때
		ES6로 개발시 const가 자주 사용되는데, 객체를 상수로 선언했을 때 속성값을 변경할 수 있다.
		→함수나 객체를 만든 후, 메모리 주소가 바뀌지 않도록 하고싶다면 const를 사용하면 된다.
		   const 객체를 생성한 경우 객체 내부의 속성이 변경될 수 있지만, 새로운 객체를 생성하여 할당하는 것은 허용하지 않는다.


🧡기본 파라미터, 가변 파라미터
	- 기본파라미터 : ES6에서 기본 파라미터를 이용해 함수의 파라미터의 기본값을 지정할 수 있다
	- 가변파라미터 : 여러개의 파라미터 값을 배열로 받을 수 있다.
			전달하는 파라미터의 개수는 가변적으로 적용가능하다

	function addInfo(name, phone, home = "없음", email="없음"){
		let str = `name : ${name}, phone : ${phone}, home : ${home}, email : ${email}`;
		console.log(str);
	}

	addInfo("짱구", "010-1234-5678");		// name : 짱구, phone : 010-1234-5678, home : 없음, email : 없음
	addInfo("짱구", "010-1234-5678", "서울시 강남구", "korea@koreait.com");	// name : 짱구, phone : 010-1234-5678, home : 서울시 강남구, email : korea@koreait.com

	function food(name, ...favoriteFoods){
		console.log(name + "이 좋아하는 음식은 : " + favoriteFoods);
	}

	food("짱구", "초코비");
	food("짱구", "초코비", "초코우유");


🧡구조 분해 할당 Dstructuring Assignment
	- ES6에서 도입된 기능, 배열이나 객체의 속성값을 추출하여 한 번에 개별 변수에 간단하게 할당할 수 있도록 하는 기능
	- 함수의 파라미터에서 사용 가능하다
	- 코드 가독성을 높이고, 변수 할당 과정을 더 간결하게 만들어준다.


🧡화살표함수 Arrow Function
	- ES6 화살표 함수는 기존 함수 표현식에 비해 간결하다
	- 함수를 정의하는 영역의 this를 그대로 전달받을 수 있다.

	★★화살표 함수에서의 this
		- 일반함수와 화살표 함수에서의 this의 차이는 함수가 중첩될 때 확인 가능하다.


🧡JS에서 this
	- 메서드, 함수가 호출될 때 마다 현재 호출중인 메서드를 보유한 객체가 this로 연결된다.
	- 현재 호출중인 메서드를 보유한 객체가 없다면 전역객체(global object, 브라우저 환경에서는 window 객체)가 연결된다.
	- JS 함수, 메서드는 어떤 객체의 메서드 형태로 호출되느냐가 this를 결정하는 기본적인 규칙이다.
	- bind( ) : 함수의 this값을 특정 객체로 고정시키는 역할을 한다.
		 지정할 객체를 this로 미리 연결(binding)한 새로운 함수를 리턴한다.

	* apply( ), call( )  :  함수를 호출하면서 특정 객체를 this로 지정할 때 사용한다.
	  apply( ) 메서드는 인수를 배열 형태로 전달한다.
	  call( ) 메서드는 인수를 각각 직접 전달한다.






